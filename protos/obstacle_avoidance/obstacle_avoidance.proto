syntax = "proto3";

package mavsdk.rpc.obstacle_avoidance;

option java_package = "io.mavsdk.obstacle_avoidance";
option java_outer_classname = "ObstacleAvoidanceProto";

/*
 * Plugin to manage and control obstacle avoidance services from the ground.
 *
 * Currently a single obstacle avoidance service instance is supported which
 * needs to have component ID MAV_COMP_ID_OBSTACLE_AVOIDANCE.
 *
 * Note also that application/service specific configurations should live in
 * the server application layer, as they are not defined at the MAVLink level.
 */
service ObstacleAvoidanceService {
    /*
     * Start obstacle avoidance service.
     */
    rpc Start(StartRequest) returns(StartResponse) {}

    /*
     * Stop obstacle avoidance service.
     */
    rpc Stop(StopRequest) returns(StopResponse) {}

    /*
     * Restart obstacle avoidance service.
     */
    rpc Restart(RestartRequest) returns(RestartResponse) {}

    /*
     * Enable obstacle avoidance service (switch from idle to active state).
     */
    rpc StateEnable(StateEnableRequest) returns(StateEnableResponse) {}

    /*
     * Disable obstacle avoidance service (switch from active to idle state).
     */
    rpc StateDisable(StateDisableRequest) returns(StateDisableResponse) {}
}

message StartRequest {}
message StartResponse {
    ObstacleAvoidanceResult result = 1;
}

message StopRequest {}
message StopResponse {
    ObstacleAvoidanceResult result = 1;
}

message RestartRequest {}
message RestartResponse {
    ObstacleAvoidanceResult result = 1;
}

message StateEnableRequest {}
message StateEnableResponse {
    ObstacleAvoidanceResult result = 1;
}

message StateDisableRequest {}
message StateDisableResponse {
    ObstacleAvoidanceResult result = 1;
}

// Result type.
message ObstacleAvoidanceResult {
    // Possible results returned for obstacle avoidance control requests.
    enum Result {
        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Request was successful
        RESULT_NO_SYSTEM = 2; // No system is connected
        RESULT_CONNECTION_ERROR = 3; // Connection error
        RESULT_BUSY = 4; // System is busy
        RESULT_COMMAND_DENIED = 5; // Command refused by system
        RESULT_TIMEOUT = 8; // Request timed out
    }

    Result result = 1; // Result enum value.
}
